// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/query/query.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/query/query.go -destination=test/mock/./pkg/query/query.go
//

// Package mock_query is a generated GoMock package.
package mock_query

import (
	url "net/url"
	reflect "reflect"

	response "github.com/sherwin-77/go-echo-template/pkg/response"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockBuilder is a mock of Builder interface.
type MockBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderMockRecorder
	isgomock struct{}
}

// MockBuilderMockRecorder is the mock recorder for MockBuilder.
type MockBuilderMockRecorder struct {
	mock *MockBuilder
}

// NewMockBuilder creates a new mock instance.
func NewMockBuilder(ctrl *gomock.Controller) *MockBuilder {
	mock := &MockBuilder{ctrl: ctrl}
	mock.recorder = &MockBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilder) EXPECT() *MockBuilderMockRecorder {
	return m.recorder
}

// ApplyBuilder mocks base method.
func (m *MockBuilder) ApplyBuilder(db *gorm.DB, queryParams url.Values, model any) (*gorm.DB, *response.Meta) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyBuilder", db, queryParams, model)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(*response.Meta)
	return ret0, ret1
}

// ApplyBuilder indicates an expected call of ApplyBuilder.
func (mr *MockBuilderMockRecorder) ApplyBuilder(db, queryParams, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyBuilder", reflect.TypeOf((*MockBuilder)(nil).ApplyBuilder), db, queryParams, model)
}
