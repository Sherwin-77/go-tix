// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/webhook.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/webhook.go -destination=test/mock/./service/webhook.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWebhookService is a mock of WebhookService interface.
type MockWebhookService struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookServiceMockRecorder
	isgomock struct{}
}

// MockWebhookServiceMockRecorder is the mock recorder for MockWebhookService.
type MockWebhookServiceMockRecorder struct {
	mock *MockWebhookService
}

// NewMockWebhookService creates a new mock instance.
func NewMockWebhookService(ctrl *gomock.Controller) *MockWebhookService {
	mock := &MockWebhookService{ctrl: ctrl}
	mock.recorder = &MockWebhookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookService) EXPECT() *MockWebhookServiceMockRecorder {
	return m.recorder
}

// HandleMidtransNotification mocks base method.
func (m *MockWebhookService) HandleMidtransNotification(ctx context.Context, payload map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMidtransNotification", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleMidtransNotification indicates an expected call of HandleMidtransNotification.
func (mr *MockWebhookServiceMockRecorder) HandleMidtransNotification(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMidtransNotification", reflect.TypeOf((*MockWebhookService)(nil).HandleMidtransNotification), ctx, payload)
}
