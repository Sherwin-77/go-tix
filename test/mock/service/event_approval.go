// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/event_approval.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/event_approval.go -destination=test/mock/./service/event_approval.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	url "net/url"
	reflect "reflect"

	entity "github.com/sherwin-77/go-tix/internal/entity"
	dto "github.com/sherwin-77/go-tix/internal/http/dto"
	response "github.com/sherwin-77/go-tix/pkg/response"
	gomock "go.uber.org/mock/gomock"
)

// MockEventApprovalService is a mock of EventApprovalService interface.
type MockEventApprovalService struct {
	ctrl     *gomock.Controller
	recorder *MockEventApprovalServiceMockRecorder
	isgomock struct{}
}

// MockEventApprovalServiceMockRecorder is the mock recorder for MockEventApprovalService.
type MockEventApprovalServiceMockRecorder struct {
	mock *MockEventApprovalService
}

// NewMockEventApprovalService creates a new mock instance.
func NewMockEventApprovalService(ctrl *gomock.Controller) *MockEventApprovalService {
	mock := &MockEventApprovalService{ctrl: ctrl}
	mock.recorder = &MockEventApprovalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventApprovalService) EXPECT() *MockEventApprovalServiceMockRecorder {
	return m.recorder
}

// GetEventApprovalByID mocks base method.
func (m *MockEventApprovalService) GetEventApprovalByID(ctx context.Context, id string) (*entity.EventApproval, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventApprovalByID", ctx, id)
	ret0, _ := ret[0].(*entity.EventApproval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventApprovalByID indicates an expected call of GetEventApprovalByID.
func (mr *MockEventApprovalServiceMockRecorder) GetEventApprovalByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventApprovalByID", reflect.TypeOf((*MockEventApprovalService)(nil).GetEventApprovalByID), ctx, id)
}

// GetEventApprovals mocks base method.
func (m *MockEventApprovalService) GetEventApprovals(ctx context.Context, queryParams url.Values) ([]entity.EventApproval, *response.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventApprovals", ctx, queryParams)
	ret0, _ := ret[0].([]entity.EventApproval)
	ret1, _ := ret[1].(*response.Meta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEventApprovals indicates an expected call of GetEventApprovals.
func (mr *MockEventApprovalServiceMockRecorder) GetEventApprovals(ctx, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventApprovals", reflect.TypeOf((*MockEventApprovalService)(nil).GetEventApprovals), ctx, queryParams)
}

// GetUserEventApprovalByID mocks base method.
func (m *MockEventApprovalService) GetUserEventApprovalByID(ctx context.Context, id, userID string) (*entity.EventApproval, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEventApprovalByID", ctx, id, userID)
	ret0, _ := ret[0].(*entity.EventApproval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEventApprovalByID indicates an expected call of GetUserEventApprovalByID.
func (mr *MockEventApprovalServiceMockRecorder) GetUserEventApprovalByID(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEventApprovalByID", reflect.TypeOf((*MockEventApprovalService)(nil).GetUserEventApprovalByID), ctx, id, userID)
}

// GetUserEventApprovals mocks base method.
func (m *MockEventApprovalService) GetUserEventApprovals(ctx context.Context, queryParams url.Values, userID string) ([]entity.EventApproval, *response.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEventApprovals", ctx, queryParams, userID)
	ret0, _ := ret[0].([]entity.EventApproval)
	ret1, _ := ret[1].(*response.Meta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserEventApprovals indicates an expected call of GetUserEventApprovals.
func (mr *MockEventApprovalServiceMockRecorder) GetUserEventApprovals(ctx, queryParams, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEventApprovals", reflect.TypeOf((*MockEventApprovalService)(nil).GetUserEventApprovals), ctx, queryParams, userID)
}

// HandleEventApproval mocks base method.
func (m *MockEventApprovalService) HandleEventApproval(ctx context.Context, request dto.HandleEventApprovalRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEventApproval", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleEventApproval indicates an expected call of HandleEventApproval.
func (mr *MockEventApprovalServiceMockRecorder) HandleEventApproval(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEventApproval", reflect.TypeOf((*MockEventApprovalService)(nil).HandleEventApproval), ctx, request)
}
