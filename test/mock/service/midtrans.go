// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/midtrans.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/midtrans.go -destination=test/mock/./service/midtrans.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	entity "github.com/sherwin-77/go-tix/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockMidtransService is a mock of MidtransService interface.
type MockMidtransService struct {
	ctrl     *gomock.Controller
	recorder *MockMidtransServiceMockRecorder
	isgomock struct{}
}

// MockMidtransServiceMockRecorder is the mock recorder for MockMidtransService.
type MockMidtransServiceMockRecorder struct {
	mock *MockMidtransService
}

// NewMockMidtransService creates a new mock instance.
func NewMockMidtransService(ctrl *gomock.Controller) *MockMidtransService {
	mock := &MockMidtransService{ctrl: ctrl}
	mock.recorder = &MockMidtransServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMidtransService) EXPECT() *MockMidtransServiceMockRecorder {
	return m.recorder
}

// CreateURLTransactionFromSaleInvoice mocks base method.
func (m *MockMidtransService) CreateURLTransactionFromSaleInvoice(ctx context.Context, saleInvoice *entity.SaleInvoice, orderID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURLTransactionFromSaleInvoice", ctx, saleInvoice, orderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateURLTransactionFromSaleInvoice indicates an expected call of CreateURLTransactionFromSaleInvoice.
func (mr *MockMidtransServiceMockRecorder) CreateURLTransactionFromSaleInvoice(ctx, saleInvoice, orderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURLTransactionFromSaleInvoice", reflect.TypeOf((*MockMidtransService)(nil).CreateURLTransactionFromSaleInvoice), ctx, saleInvoice, orderID)
}
