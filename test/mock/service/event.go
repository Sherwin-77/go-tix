// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/event.go
//
// Generated by this command:
//
//	mockgen -source=./internal/service/event.go -destination=test/mock/./service/event.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	url "net/url"
	reflect "reflect"

	entity "github.com/sherwin-77/go-tix/internal/entity"
	dto "github.com/sherwin-77/go-tix/internal/http/dto"
	response "github.com/sherwin-77/go-tix/pkg/response"
	gomock "go.uber.org/mock/gomock"
)

// MockEventService is a mock of EventService interface.
type MockEventService struct {
	ctrl     *gomock.Controller
	recorder *MockEventServiceMockRecorder
	isgomock struct{}
}

// MockEventServiceMockRecorder is the mock recorder for MockEventService.
type MockEventServiceMockRecorder struct {
	mock *MockEventService
}

// NewMockEventService creates a new mock instance.
func NewMockEventService(ctrl *gomock.Controller) *MockEventService {
	mock := &MockEventService{ctrl: ctrl}
	mock.recorder = &MockEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventService) EXPECT() *MockEventServiceMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventService) CreateEvent(ctx context.Context, request dto.CreateEventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventServiceMockRecorder) CreateEvent(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventService)(nil).CreateEvent), ctx, request)
}

// CreateEventFromEventApproval mocks base method.
func (m *MockEventService) CreateEventFromEventApproval(ctx context.Context, eventApproval *entity.EventApproval) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventFromEventApproval", ctx, eventApproval)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEventFromEventApproval indicates an expected call of CreateEventFromEventApproval.
func (mr *MockEventServiceMockRecorder) CreateEventFromEventApproval(ctx, eventApproval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventFromEventApproval", reflect.TypeOf((*MockEventService)(nil).CreateEventFromEventApproval), ctx, eventApproval)
}

// GetEventByID mocks base method.
func (m *MockEventService) GetEventByID(ctx context.Context, id string) (*entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", ctx, id)
	ret0, _ := ret[0].(*entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockEventServiceMockRecorder) GetEventByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockEventService)(nil).GetEventByID), ctx, id)
}

// GetEvents mocks base method.
func (m *MockEventService) GetEvents(ctx context.Context, queryParams url.Values) ([]entity.EventWithMinMaxPrice, *response.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx, queryParams)
	ret0, _ := ret[0].([]entity.EventWithMinMaxPrice)
	ret1, _ := ret[1].(*response.Meta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockEventServiceMockRecorder) GetEvents(ctx, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockEventService)(nil).GetEvents), ctx, queryParams)
}

// GetUserEventByID mocks base method.
func (m *MockEventService) GetUserEventByID(ctx context.Context, id string) (*entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEventByID", ctx, id)
	ret0, _ := ret[0].(*entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEventByID indicates an expected call of GetUserEventByID.
func (mr *MockEventServiceMockRecorder) GetUserEventByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEventByID", reflect.TypeOf((*MockEventService)(nil).GetUserEventByID), ctx, id)
}

// GetUserEvents mocks base method.
func (m *MockEventService) GetUserEvents(ctx context.Context, queryParams url.Values) ([]entity.EventWithMinMaxPrice, *response.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEvents", ctx, queryParams)
	ret0, _ := ret[0].([]entity.EventWithMinMaxPrice)
	ret1, _ := ret[1].(*response.Meta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserEvents indicates an expected call of GetUserEvents.
func (mr *MockEventServiceMockRecorder) GetUserEvents(ctx, queryParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEvents", reflect.TypeOf((*MockEventService)(nil).GetUserEvents), ctx, queryParams)
}

// RegisterEvent mocks base method.
func (m *MockEventService) RegisterEvent(ctx context.Context, request dto.CreateEventRequest, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEvent", ctx, request, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterEvent indicates an expected call of RegisterEvent.
func (mr *MockEventServiceMockRecorder) RegisterEvent(ctx, request, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEvent", reflect.TypeOf((*MockEventService)(nil).RegisterEvent), ctx, request, userID)
}

// UpdateEvent mocks base method.
func (m *MockEventService) UpdateEvent(ctx context.Context, request dto.UpdateEventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventServiceMockRecorder) UpdateEvent(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventService)(nil).UpdateEvent), ctx, request)
}
