// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/event_approvals_ticket.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/event_approvals_ticket.go -destination=test/mock/./repository/event_approvals_ticket.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/sherwin-77/go-tix/internal/entity"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockEventApprovalTicketRepository is a mock of EventApprovalTicketRepository interface.
type MockEventApprovalTicketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventApprovalTicketRepositoryMockRecorder
	isgomock struct{}
}

// MockEventApprovalTicketRepositoryMockRecorder is the mock recorder for MockEventApprovalTicketRepository.
type MockEventApprovalTicketRepositoryMockRecorder struct {
	mock *MockEventApprovalTicketRepository
}

// NewMockEventApprovalTicketRepository creates a new mock instance.
func NewMockEventApprovalTicketRepository(ctrl *gomock.Controller) *MockEventApprovalTicketRepository {
	mock := &MockEventApprovalTicketRepository{ctrl: ctrl}
	mock.recorder = &MockEventApprovalTicketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventApprovalTicketRepository) EXPECT() *MockEventApprovalTicketRepositoryMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockEventApprovalTicketRepository) BeginTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockEventApprovalTicketRepositoryMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockEventApprovalTicketRepository)(nil).BeginTransaction))
}

// Commit mocks base method.
func (m *MockEventApprovalTicketRepository) Commit(tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockEventApprovalTicketRepositoryMockRecorder) Commit(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockEventApprovalTicketRepository)(nil).Commit), tx)
}

// CreateEventApprovalTicket mocks base method.
func (m *MockEventApprovalTicketRepository) CreateEventApprovalTicket(ctx context.Context, tx *gorm.DB, eventApprovalTicket *entity.EventApprovalTicket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEventApprovalTicket", ctx, tx, eventApprovalTicket)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEventApprovalTicket indicates an expected call of CreateEventApprovalTicket.
func (mr *MockEventApprovalTicketRepositoryMockRecorder) CreateEventApprovalTicket(ctx, tx, eventApprovalTicket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEventApprovalTicket", reflect.TypeOf((*MockEventApprovalTicketRepository)(nil).CreateEventApprovalTicket), ctx, tx, eventApprovalTicket)
}

// DeleteEventApprovalTicket mocks base method.
func (m *MockEventApprovalTicketRepository) DeleteEventApprovalTicket(ctx context.Context, tx *gorm.DB, eventApprovalTicket *entity.EventApprovalTicket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventApprovalTicket", ctx, tx, eventApprovalTicket)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEventApprovalTicket indicates an expected call of DeleteEventApprovalTicket.
func (mr *MockEventApprovalTicketRepositoryMockRecorder) DeleteEventApprovalTicket(ctx, tx, eventApprovalTicket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventApprovalTicket", reflect.TypeOf((*MockEventApprovalTicketRepository)(nil).DeleteEventApprovalTicket), ctx, tx, eventApprovalTicket)
}

// GetEventApprovalTicketByID mocks base method.
func (m *MockEventApprovalTicketRepository) GetEventApprovalTicketByID(ctx context.Context, tx *gorm.DB, id string) (*entity.EventApprovalTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventApprovalTicketByID", ctx, tx, id)
	ret0, _ := ret[0].(*entity.EventApprovalTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventApprovalTicketByID indicates an expected call of GetEventApprovalTicketByID.
func (mr *MockEventApprovalTicketRepositoryMockRecorder) GetEventApprovalTicketByID(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventApprovalTicketByID", reflect.TypeOf((*MockEventApprovalTicketRepository)(nil).GetEventApprovalTicketByID), ctx, tx, id)
}

// GetEventApprovalTickets mocks base method.
func (m *MockEventApprovalTicketRepository) GetEventApprovalTickets(ctx context.Context, tx *gorm.DB) ([]entity.EventApprovalTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventApprovalTickets", ctx, tx)
	ret0, _ := ret[0].([]entity.EventApprovalTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventApprovalTickets indicates an expected call of GetEventApprovalTickets.
func (mr *MockEventApprovalTicketRepositoryMockRecorder) GetEventApprovalTickets(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventApprovalTickets", reflect.TypeOf((*MockEventApprovalTicketRepository)(nil).GetEventApprovalTickets), ctx, tx)
}

// GetEventApprovalTicketsFiltered mocks base method.
func (m *MockEventApprovalTicketRepository) GetEventApprovalTicketsFiltered(ctx context.Context, tx *gorm.DB, limit, offset int, order, query any, args ...any) ([]entity.EventApprovalTicket, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, tx, limit, offset, order, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventApprovalTicketsFiltered", varargs...)
	ret0, _ := ret[0].([]entity.EventApprovalTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventApprovalTicketsFiltered indicates an expected call of GetEventApprovalTicketsFiltered.
func (mr *MockEventApprovalTicketRepositoryMockRecorder) GetEventApprovalTicketsFiltered(ctx, tx, limit, offset, order, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, tx, limit, offset, order, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventApprovalTicketsFiltered", reflect.TypeOf((*MockEventApprovalTicketRepository)(nil).GetEventApprovalTicketsFiltered), varargs...)
}

// Rollback mocks base method.
func (m *MockEventApprovalTicketRepository) Rollback(tx *gorm.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", tx)
}

// Rollback indicates an expected call of Rollback.
func (mr *MockEventApprovalTicketRepositoryMockRecorder) Rollback(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockEventApprovalTicketRepository)(nil).Rollback), tx)
}

// SingleTransaction mocks base method.
func (m *MockEventApprovalTicketRepository) SingleTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SingleTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// SingleTransaction indicates an expected call of SingleTransaction.
func (mr *MockEventApprovalTicketRepositoryMockRecorder) SingleTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingleTransaction", reflect.TypeOf((*MockEventApprovalTicketRepository)(nil).SingleTransaction))
}

// UpdateEventApprovalTicket mocks base method.
func (m *MockEventApprovalTicketRepository) UpdateEventApprovalTicket(ctx context.Context, tx *gorm.DB, eventApprovalTicket *entity.EventApprovalTicket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventApprovalTicket", ctx, tx, eventApprovalTicket)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventApprovalTicket indicates an expected call of UpdateEventApprovalTicket.
func (mr *MockEventApprovalTicketRepositoryMockRecorder) UpdateEventApprovalTicket(ctx, tx, eventApprovalTicket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventApprovalTicket", reflect.TypeOf((*MockEventApprovalTicketRepository)(nil).UpdateEventApprovalTicket), ctx, tx, eventApprovalTicket)
}

// WithPreloads mocks base method.
func (m *MockEventApprovalTicketRepository) WithPreloads(tx *gorm.DB, preloads map[string][]any) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPreloads", tx, preloads)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// WithPreloads indicates an expected call of WithPreloads.
func (mr *MockEventApprovalTicketRepositoryMockRecorder) WithPreloads(tx, preloads any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPreloads", reflect.TypeOf((*MockEventApprovalTicketRepository)(nil).WithPreloads), tx, preloads)
}

// WithTransaction mocks base method.
func (m *MockEventApprovalTicketRepository) WithTransaction(fn func(*gorm.DB) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockEventApprovalTicketRepositoryMockRecorder) WithTransaction(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockEventApprovalTicketRepository)(nil).WithTransaction), fn)
}
