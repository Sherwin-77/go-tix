// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/event.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/event.go -destination=test/mock/./repository/event.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/sherwin-77/go-tix/internal/entity"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockEventRepository is a mock of EventRepository interface.
type MockEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepositoryMockRecorder
	isgomock struct{}
}

// MockEventRepositoryMockRecorder is the mock recorder for MockEventRepository.
type MockEventRepositoryMockRecorder struct {
	mock *MockEventRepository
}

// NewMockEventRepository creates a new mock instance.
func NewMockEventRepository(ctrl *gomock.Controller) *MockEventRepository {
	mock := &MockEventRepository{ctrl: ctrl}
	mock.recorder = &MockEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepository) EXPECT() *MockEventRepositoryMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockEventRepository) BeginTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockEventRepositoryMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockEventRepository)(nil).BeginTransaction))
}

// Commit mocks base method.
func (m *MockEventRepository) Commit(tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockEventRepositoryMockRecorder) Commit(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockEventRepository)(nil).Commit), tx)
}

// CreateEvent mocks base method.
func (m *MockEventRepository) CreateEvent(ctx context.Context, tx *gorm.DB, event *entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", ctx, tx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventRepositoryMockRecorder) CreateEvent(ctx, tx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventRepository)(nil).CreateEvent), ctx, tx, event)
}

// DeleteEvent mocks base method.
func (m *MockEventRepository) DeleteEvent(ctx context.Context, tx *gorm.DB, event *entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", ctx, tx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventRepositoryMockRecorder) DeleteEvent(ctx, tx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventRepository)(nil).DeleteEvent), ctx, tx, event)
}

// GetActiveEventsWithMinMaxPrice mocks base method.
func (m *MockEventRepository) GetActiveEventsWithMinMaxPrice(ctx context.Context, tx *gorm.DB) ([]entity.EventWithMinMaxPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveEventsWithMinMaxPrice", ctx, tx)
	ret0, _ := ret[0].([]entity.EventWithMinMaxPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveEventsWithMinMaxPrice indicates an expected call of GetActiveEventsWithMinMaxPrice.
func (mr *MockEventRepositoryMockRecorder) GetActiveEventsWithMinMaxPrice(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveEventsWithMinMaxPrice", reflect.TypeOf((*MockEventRepository)(nil).GetActiveEventsWithMinMaxPrice), ctx, tx)
}

// GetEventByID mocks base method.
func (m *MockEventRepository) GetEventByID(ctx context.Context, tx *gorm.DB, id string) (*entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", ctx, tx, id)
	ret0, _ := ret[0].(*entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockEventRepositoryMockRecorder) GetEventByID(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockEventRepository)(nil).GetEventByID), ctx, tx, id)
}

// GetEvents mocks base method.
func (m *MockEventRepository) GetEvents(ctx context.Context, tx *gorm.DB) ([]entity.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx, tx)
	ret0, _ := ret[0].([]entity.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockEventRepositoryMockRecorder) GetEvents(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockEventRepository)(nil).GetEvents), ctx, tx)
}

// GetEventsWithMinMaxPrice mocks base method.
func (m *MockEventRepository) GetEventsWithMinMaxPrice(ctx context.Context, tx *gorm.DB) ([]entity.EventWithMinMaxPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsWithMinMaxPrice", ctx, tx)
	ret0, _ := ret[0].([]entity.EventWithMinMaxPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsWithMinMaxPrice indicates an expected call of GetEventsWithMinMaxPrice.
func (mr *MockEventRepositoryMockRecorder) GetEventsWithMinMaxPrice(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsWithMinMaxPrice", reflect.TypeOf((*MockEventRepository)(nil).GetEventsWithMinMaxPrice), ctx, tx)
}

// Rollback mocks base method.
func (m *MockEventRepository) Rollback(tx *gorm.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", tx)
}

// Rollback indicates an expected call of Rollback.
func (mr *MockEventRepositoryMockRecorder) Rollback(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockEventRepository)(nil).Rollback), tx)
}

// SingleTransaction mocks base method.
func (m *MockEventRepository) SingleTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SingleTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// SingleTransaction indicates an expected call of SingleTransaction.
func (mr *MockEventRepositoryMockRecorder) SingleTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingleTransaction", reflect.TypeOf((*MockEventRepository)(nil).SingleTransaction))
}

// UpdateEvent mocks base method.
func (m *MockEventRepository) UpdateEvent(ctx context.Context, tx *gorm.DB, event *entity.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", ctx, tx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventRepositoryMockRecorder) UpdateEvent(ctx, tx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventRepository)(nil).UpdateEvent), ctx, tx, event)
}

// WithPreloads mocks base method.
func (m *MockEventRepository) WithPreloads(tx *gorm.DB, preloads map[string][]any) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPreloads", tx, preloads)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// WithPreloads indicates an expected call of WithPreloads.
func (mr *MockEventRepositoryMockRecorder) WithPreloads(tx, preloads any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPreloads", reflect.TypeOf((*MockEventRepository)(nil).WithPreloads), tx, preloads)
}

// WithTransaction mocks base method.
func (m *MockEventRepository) WithTransaction(fn func(*gorm.DB) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockEventRepositoryMockRecorder) WithTransaction(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockEventRepository)(nil).WithTransaction), fn)
}
