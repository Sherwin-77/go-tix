// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/sale_invoice_item.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/sale_invoice_item.go -destination=test/mock/./repository/sale_invoice_item.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/sherwin-77/go-tix/internal/entity"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSaleInvoiceItemRepository is a mock of SaleInvoiceItemRepository interface.
type MockSaleInvoiceItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSaleInvoiceItemRepositoryMockRecorder
	isgomock struct{}
}

// MockSaleInvoiceItemRepositoryMockRecorder is the mock recorder for MockSaleInvoiceItemRepository.
type MockSaleInvoiceItemRepositoryMockRecorder struct {
	mock *MockSaleInvoiceItemRepository
}

// NewMockSaleInvoiceItemRepository creates a new mock instance.
func NewMockSaleInvoiceItemRepository(ctrl *gomock.Controller) *MockSaleInvoiceItemRepository {
	mock := &MockSaleInvoiceItemRepository{ctrl: ctrl}
	mock.recorder = &MockSaleInvoiceItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaleInvoiceItemRepository) EXPECT() *MockSaleInvoiceItemRepositoryMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockSaleInvoiceItemRepository) BeginTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockSaleInvoiceItemRepositoryMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockSaleInvoiceItemRepository)(nil).BeginTransaction))
}

// Commit mocks base method.
func (m *MockSaleInvoiceItemRepository) Commit(tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockSaleInvoiceItemRepositoryMockRecorder) Commit(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockSaleInvoiceItemRepository)(nil).Commit), tx)
}

// CreateSaleInvoiceItem mocks base method.
func (m *MockSaleInvoiceItemRepository) CreateSaleInvoiceItem(ctx context.Context, tx *gorm.DB, saleInvoiceItem *entity.SaleInvoiceItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSaleInvoiceItem", ctx, tx, saleInvoiceItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSaleInvoiceItem indicates an expected call of CreateSaleInvoiceItem.
func (mr *MockSaleInvoiceItemRepositoryMockRecorder) CreateSaleInvoiceItem(ctx, tx, saleInvoiceItem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSaleInvoiceItem", reflect.TypeOf((*MockSaleInvoiceItemRepository)(nil).CreateSaleInvoiceItem), ctx, tx, saleInvoiceItem)
}

// DeleteSaleInvoiceItem mocks base method.
func (m *MockSaleInvoiceItemRepository) DeleteSaleInvoiceItem(ctx context.Context, tx *gorm.DB, saleInvoiceItem *entity.SaleInvoiceItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSaleInvoiceItem", ctx, tx, saleInvoiceItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSaleInvoiceItem indicates an expected call of DeleteSaleInvoiceItem.
func (mr *MockSaleInvoiceItemRepositoryMockRecorder) DeleteSaleInvoiceItem(ctx, tx, saleInvoiceItem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSaleInvoiceItem", reflect.TypeOf((*MockSaleInvoiceItemRepository)(nil).DeleteSaleInvoiceItem), ctx, tx, saleInvoiceItem)
}

// GetSaleInvoiceItemByID mocks base method.
func (m *MockSaleInvoiceItemRepository) GetSaleInvoiceItemByID(ctx context.Context, tx *gorm.DB, id string) (*entity.SaleInvoiceItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSaleInvoiceItemByID", ctx, tx, id)
	ret0, _ := ret[0].(*entity.SaleInvoiceItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSaleInvoiceItemByID indicates an expected call of GetSaleInvoiceItemByID.
func (mr *MockSaleInvoiceItemRepositoryMockRecorder) GetSaleInvoiceItemByID(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSaleInvoiceItemByID", reflect.TypeOf((*MockSaleInvoiceItemRepository)(nil).GetSaleInvoiceItemByID), ctx, tx, id)
}

// GetSaleInvoiceItems mocks base method.
func (m *MockSaleInvoiceItemRepository) GetSaleInvoiceItems(ctx context.Context, tx *gorm.DB) ([]entity.SaleInvoiceItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSaleInvoiceItems", ctx, tx)
	ret0, _ := ret[0].([]entity.SaleInvoiceItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSaleInvoiceItems indicates an expected call of GetSaleInvoiceItems.
func (mr *MockSaleInvoiceItemRepositoryMockRecorder) GetSaleInvoiceItems(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSaleInvoiceItems", reflect.TypeOf((*MockSaleInvoiceItemRepository)(nil).GetSaleInvoiceItems), ctx, tx)
}

// Rollback mocks base method.
func (m *MockSaleInvoiceItemRepository) Rollback(tx *gorm.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", tx)
}

// Rollback indicates an expected call of Rollback.
func (mr *MockSaleInvoiceItemRepositoryMockRecorder) Rollback(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockSaleInvoiceItemRepository)(nil).Rollback), tx)
}

// SingleTransaction mocks base method.
func (m *MockSaleInvoiceItemRepository) SingleTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SingleTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// SingleTransaction indicates an expected call of SingleTransaction.
func (mr *MockSaleInvoiceItemRepositoryMockRecorder) SingleTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingleTransaction", reflect.TypeOf((*MockSaleInvoiceItemRepository)(nil).SingleTransaction))
}

// UpdateSaleInvoiceItem mocks base method.
func (m *MockSaleInvoiceItemRepository) UpdateSaleInvoiceItem(ctx context.Context, tx *gorm.DB, saleInvoiceItem *entity.SaleInvoiceItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSaleInvoiceItem", ctx, tx, saleInvoiceItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSaleInvoiceItem indicates an expected call of UpdateSaleInvoiceItem.
func (mr *MockSaleInvoiceItemRepositoryMockRecorder) UpdateSaleInvoiceItem(ctx, tx, saleInvoiceItem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSaleInvoiceItem", reflect.TypeOf((*MockSaleInvoiceItemRepository)(nil).UpdateSaleInvoiceItem), ctx, tx, saleInvoiceItem)
}

// WithPreloads mocks base method.
func (m *MockSaleInvoiceItemRepository) WithPreloads(tx *gorm.DB, preloads map[string][]any) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPreloads", tx, preloads)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// WithPreloads indicates an expected call of WithPreloads.
func (mr *MockSaleInvoiceItemRepositoryMockRecorder) WithPreloads(tx, preloads any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPreloads", reflect.TypeOf((*MockSaleInvoiceItemRepository)(nil).WithPreloads), tx, preloads)
}

// WithTransaction mocks base method.
func (m *MockSaleInvoiceItemRepository) WithTransaction(fn func(*gorm.DB) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockSaleInvoiceItemRepositoryMockRecorder) WithTransaction(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockSaleInvoiceItemRepository)(nil).WithTransaction), fn)
}
