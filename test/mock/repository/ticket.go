// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/ticket.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/ticket.go -destination=test/mock/./repository/ticket.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/sherwin-77/go-tix/internal/entity"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockTicketRepository is a mock of TicketRepository interface.
type MockTicketRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTicketRepositoryMockRecorder
	isgomock struct{}
}

// MockTicketRepositoryMockRecorder is the mock recorder for MockTicketRepository.
type MockTicketRepositoryMockRecorder struct {
	mock *MockTicketRepository
}

// NewMockTicketRepository creates a new mock instance.
func NewMockTicketRepository(ctrl *gomock.Controller) *MockTicketRepository {
	mock := &MockTicketRepository{ctrl: ctrl}
	mock.recorder = &MockTicketRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketRepository) EXPECT() *MockTicketRepositoryMockRecorder {
	return m.recorder
}

// GetTicketsByTicketIDs mocks base method.
func (m *MockTicketRepository) GetTicketsByTicketIDs(ctx context.Context, tx *gorm.DB, ticketIDs []string) ([]entity.Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicketsByTicketIDs", ctx, tx, ticketIDs)
	ret0, _ := ret[0].([]entity.Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicketsByTicketIDs indicates an expected call of GetTicketsByTicketIDs.
func (mr *MockTicketRepositoryMockRecorder) GetTicketsByTicketIDs(ctx, tx, ticketIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicketsByTicketIDs", reflect.TypeOf((*MockTicketRepository)(nil).GetTicketsByTicketIDs), ctx, tx, ticketIDs)
}
