// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/snap_payment.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/snap_payment.go -destination=test/mock/./repository/snap_payment.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/sherwin-77/go-tix/internal/entity"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockSnapPaymentRepository is a mock of SnapPaymentRepository interface.
type MockSnapPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSnapPaymentRepositoryMockRecorder
	isgomock struct{}
}

// MockSnapPaymentRepositoryMockRecorder is the mock recorder for MockSnapPaymentRepository.
type MockSnapPaymentRepositoryMockRecorder struct {
	mock *MockSnapPaymentRepository
}

// NewMockSnapPaymentRepository creates a new mock instance.
func NewMockSnapPaymentRepository(ctrl *gomock.Controller) *MockSnapPaymentRepository {
	mock := &MockSnapPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockSnapPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnapPaymentRepository) EXPECT() *MockSnapPaymentRepositoryMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockSnapPaymentRepository) BeginTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockSnapPaymentRepositoryMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockSnapPaymentRepository)(nil).BeginTransaction))
}

// Commit mocks base method.
func (m *MockSnapPaymentRepository) Commit(tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockSnapPaymentRepositoryMockRecorder) Commit(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockSnapPaymentRepository)(nil).Commit), tx)
}

// CreateSnapPayment mocks base method.
func (m *MockSnapPaymentRepository) CreateSnapPayment(ctx context.Context, tx *gorm.DB, snapPayment *entity.SnapPayment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapPayment", ctx, tx, snapPayment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSnapPayment indicates an expected call of CreateSnapPayment.
func (mr *MockSnapPaymentRepositoryMockRecorder) CreateSnapPayment(ctx, tx, snapPayment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapPayment", reflect.TypeOf((*MockSnapPaymentRepository)(nil).CreateSnapPayment), ctx, tx, snapPayment)
}

// ExternalIDExists mocks base method.
func (m *MockSnapPaymentRepository) ExternalIDExists(ctx context.Context, tx *gorm.DB, externalID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalIDExists", ctx, tx, externalID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalIDExists indicates an expected call of ExternalIDExists.
func (mr *MockSnapPaymentRepositoryMockRecorder) ExternalIDExists(ctx, tx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalIDExists", reflect.TypeOf((*MockSnapPaymentRepository)(nil).ExternalIDExists), ctx, tx, externalID)
}

// GetByExternalID mocks base method.
func (m *MockSnapPaymentRepository) GetByExternalID(ctx context.Context, tx *gorm.DB, externalID string) (*entity.SnapPayment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExternalID", ctx, tx, externalID)
	ret0, _ := ret[0].(*entity.SnapPayment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExternalID indicates an expected call of GetByExternalID.
func (mr *MockSnapPaymentRepositoryMockRecorder) GetByExternalID(ctx, tx, externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExternalID", reflect.TypeOf((*MockSnapPaymentRepository)(nil).GetByExternalID), ctx, tx, externalID)
}

// Rollback mocks base method.
func (m *MockSnapPaymentRepository) Rollback(tx *gorm.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", tx)
}

// Rollback indicates an expected call of Rollback.
func (mr *MockSnapPaymentRepositoryMockRecorder) Rollback(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockSnapPaymentRepository)(nil).Rollback), tx)
}

// SingleTransaction mocks base method.
func (m *MockSnapPaymentRepository) SingleTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SingleTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// SingleTransaction indicates an expected call of SingleTransaction.
func (mr *MockSnapPaymentRepositoryMockRecorder) SingleTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SingleTransaction", reflect.TypeOf((*MockSnapPaymentRepository)(nil).SingleTransaction))
}

// UpdateSnapPayment mocks base method.
func (m *MockSnapPaymentRepository) UpdateSnapPayment(ctx context.Context, tx *gorm.DB, snapPayment *entity.SnapPayment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapPayment", ctx, tx, snapPayment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSnapPayment indicates an expected call of UpdateSnapPayment.
func (mr *MockSnapPaymentRepositoryMockRecorder) UpdateSnapPayment(ctx, tx, snapPayment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapPayment", reflect.TypeOf((*MockSnapPaymentRepository)(nil).UpdateSnapPayment), ctx, tx, snapPayment)
}

// WithPreloads mocks base method.
func (m *MockSnapPaymentRepository) WithPreloads(tx *gorm.DB, preloads map[string][]any) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithPreloads", tx, preloads)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// WithPreloads indicates an expected call of WithPreloads.
func (mr *MockSnapPaymentRepositoryMockRecorder) WithPreloads(tx, preloads any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPreloads", reflect.TypeOf((*MockSnapPaymentRepository)(nil).WithPreloads), tx, preloads)
}

// WithTransaction mocks base method.
func (m *MockSnapPaymentRepository) WithTransaction(fn func(*gorm.DB) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockSnapPaymentRepositoryMockRecorder) WithTransaction(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockSnapPaymentRepository)(nil).WithTransaction), fn)
}
