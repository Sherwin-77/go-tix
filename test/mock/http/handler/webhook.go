// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/http/handler/webhook.go
//
// Generated by this command:
//
//	mockgen -source=./internal/http/handler/webhook.go -destination=test/mock/./http/handler/webhook.go
//

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockWebhookHandler is a mock of WebhookHandler interface.
type MockWebhookHandler struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookHandlerMockRecorder
	isgomock struct{}
}

// MockWebhookHandlerMockRecorder is the mock recorder for MockWebhookHandler.
type MockWebhookHandlerMockRecorder struct {
	mock *MockWebhookHandler
}

// NewMockWebhookHandler creates a new mock instance.
func NewMockWebhookHandler(ctrl *gomock.Controller) *MockWebhookHandler {
	mock := &MockWebhookHandler{ctrl: ctrl}
	mock.recorder = &MockWebhookHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookHandler) EXPECT() *MockWebhookHandlerMockRecorder {
	return m.recorder
}

// HandleMidtransNotification mocks base method.
func (m *MockWebhookHandler) HandleMidtransNotification(ctx echo.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMidtransNotification", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleMidtransNotification indicates an expected call of HandleMidtransNotification.
func (mr *MockWebhookHandlerMockRecorder) HandleMidtransNotification(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMidtransNotification", reflect.TypeOf((*MockWebhookHandler)(nil).HandleMidtransNotification), ctx)
}
